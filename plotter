library(ggplot2)
library(plyr)
library(zoo)
library(GLDEX)


te = read.delim("file location")
head(te)

#get Group 
chr.i = te[which(te$Group == 'groupI'),]
chr.ii = te[which(te$Group == 'groupII'),]
chr.iii = te[which(te$Group == 'groupIII'),]
chr.iv = te[which(te$Group == 'groupIV'),]
chr.v = te[which(te$Group == 'groupV'),]
chr.vi = te[which(te$Group == 'groupVI'),]
chr.vii = te[which(te$Group == 'groupVII'),]
chr.viii = te[which(te$Group == 'groupVII'),]
chr.ix = te[which(te$Group == 'groupIX'),]

chr.xx = te[which(te$Group == 'groupXX'),]
#Order by location
chr.iv = chr.iv[order(rs$Loc), ]
table(chr.iv$Name)
set = which(chr.iv$FreqRS <= .75 & chr.iv$FreqRS > .1)

plot(x = chr.iv$Loc[], y = chr.iv$FreqRS[], col = 'blue', 
     ylim = c(0,1), xlim = c(11000000,14000000))
abline(v = 12810341)
#points(x = chr.iv$Loc[], y = chr.iv$FreqRS[], col = 'green')

sum(chr.iv$Loc[which(chr.iv$Loc == 1000)])

add.te = function(window.size, group, area = c(0, group$Loc[which.max(group$Loc)])){
  k=1
  group.size = area[2]
  step = window.size + area[1]
  step.0 = area[1]
  total = matrix(ncol = 2, nrow = group.size/window.size)
  for (i in 1:((group.size/window.size)-(step.0/window.size))) {
      c = length(which(group$Loc > step.0 & group$Loc <= step ))
      if (c > 0 & !is.na(c)) {
        total[k,1] = (step.0+step)/2
        total[k,2] = c
        k= k+1
      }
    step.0 = step.0 + window.size + 1
    step = step + window.size
  }
  return(na.omit(total))
}

mean.te = function(window.size, group, pop, area = c(0, group$Loc[which.max(group$Loc)])){
  k=1
  group.size = area[2]
  step = window.size + area[1]
  step.0 = area[1]
  total = matrix(ncol = 2, nrow = group.size/window.size)
  for (i in 1:((group.size/window.size)-(step.0/window.size))) {
    c = mean(group[[pop]][which(group$Loc > step.0 & group$Loc <= step)])
    if (c > 0 & !is.na(c)) {
      total[k,1] = (step.0+step)/2
      total[k,2] = c
      k = k+1
    }
    step.0 = step.0 + window.size 
    step = step + window.size
  }
  return(na.omit(total))
}


#plot freq aves
rs.iv.ave = mean.te(100000, chr.iv[], "FreqRS", c(0,111111111))
cl.iv.ave = mean.te(100000, chr.iv, "FreqCL")
plot(rs.iv.ave[], col = 'purple')
points(iv.ave[], col = 'orange')
lines(smooth.spline(rs.iv.ave[]), col = 'blue') #RS freq linefit
lines(smooth.spline(cl.iv.ave), col = 'red')    #CL freq linefit

#plot the sums and adjust frequency by max sum value 
span = 1000000
eda = c(12808589-span, 12810341+span)
pitx1 = c(1940668-span, 1942204+span)

y

#comparison graph
compare = function(pop, chr, gene, mean.window, total.window, mean.fit = .2, total.fit = .2){
  #get frequency and totals vectors 
  if (is.na(gene)) {
    rs.freq = mean.te(mean.window, chr, pop)
    rs.totals = add.te(total.window, chr)
  } else{
    rs.freq = mean.te(mean.window, chr, pop, gene)
    rs.totals = add.te(total.window, chr, gene)
    }
  #get data for graph
  sum.max = rs.totals[which.max(rs.totals[,2]),2]
  
  y2 = rs.totals[,2] / sum.max
  x2 = rs.totals[,1]
  
  y1 = rs.freq[,2]
  x1 = rs.freq[,1]
  
  #make sure data frames are equal 
  for (i in (length(rs.freq[,1])-1):length(rs.totals[,1])+1) {
    x2[i] = NA
    y2[i] = NA
  }
  df = data.frame(x1, y1, x2, y2)
  
  #plot
  c = ggplot(df, aes(x1, y = value, color = Legend)) + 
    geom_point(aes(y = y2, x = x2, col = "Total"), size = 1) + 
    geom_point(aes(y = y1, x = x1, col = "Freq"), size = 1) +  
    geom_smooth(span = total.fit, aes(y = y2, x = x2, col = "Total Fit"), size = 1, se = F) +
    geom_smooth(span = mean.fit, aes(y = y1, x = x1, col = "Freq Fit"), size = 1, se = F) +
    scale_color_manual(values = c('purple', 'blue', 'orange', 'red')) +
    geom_vline(aes(xintercept = gene[1]+span))
  
  #debug
  print(y2)
  
  #plot
  return(c)
}

compare("FreqRS", chr.iv, NA, 1000, 100000)
